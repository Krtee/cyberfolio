/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/tv9.glb -t -T 
Files: public/tv9.glb [439.23MB] > /Users/minh/websites/portfolio/tv9-transformed.glb [7.44MB] (98%)
*/

import { useGLTF, useTexture, useVideoTexture } from "@react-three/drei";
import { Suspense, useMemo } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

import FragmentShader from "./../utils/shader/tv/fragment.glsl";
import VertexShader from "./../utils/shader/tv/vertex.glsl";

type ActionName = "actionNameOne" | "actionNameTwo";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Cube006: THREE.Mesh;
    Cube006_1: THREE.Mesh;
    Cube006_2: THREE.Mesh;
    Cube006_3: THREE.Mesh;
    Cube006_4: THREE.Mesh;
    Cube006_5: THREE.Mesh;
    Cube006_6: THREE.Mesh;
    Cube006_7: THREE.Mesh;
    Cube006_8: THREE.Mesh;
    Cube006_9: THREE.Mesh;
    Cube006_10: THREE.Mesh;
    Cube006_11: THREE.Mesh;
    Cube006_12: THREE.Mesh;
    Cube006_13: THREE.Mesh;
    Cube006_14: THREE.Mesh;
    Cube006_15: THREE.Mesh;
    Cube006_16: THREE.Mesh;
    Cube006_17: THREE.Mesh;
    Cube006_18: THREE.Mesh;
    Cube006_19: THREE.Mesh;
    Cube006_20: THREE.Mesh;
    Cube006_21: THREE.Mesh;
    Cube006_22: THREE.Mesh;
    Cube006_23: THREE.Mesh;
    Cube006_24: THREE.Mesh;
    Cube006_25: THREE.Mesh;
    Cube006_26: THREE.Mesh;
    Cube006_27: THREE.Mesh;
    Cube006_28: THREE.Mesh;
    Cube006_29: THREE.Mesh;
  };
  materials: {
    ["Noise fabric.002"]: THREE.MeshStandardMaterial;
    Typenschild: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    ["Steel_Gebürsted.Dunkel.000"]: THREE.MeshStandardMaterial;
    ["Material.007"]: THREE.MeshStandardMaterial;
    PaletteMaterial004: THREE.MeshStandardMaterial;
    ["Material.013"]: THREE.MeshStandardMaterial;
    ["Noise fabric.001"]: THREE.MeshStandardMaterial;
    ["02___Default_1002"]: THREE.MeshStandardMaterial;
    ["02___Default_1001"]: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
    TV: THREE.MeshStandardMaterial;
    ["07_-_Default"]: THREE.MeshStandardMaterial;
    ["08_-_Default"]: THREE.MeshStandardMaterial;
    ["большая кнопка"]: THREE.MeshStandardMaterial;
    ["сред кнопка"]: THREE.MeshStandardMaterial;
    ["маленькие кнопки"]: THREE.MeshStandardMaterial;
    корпус: THREE.MeshStandardMaterial;
    ["пластик екрана"]: THREE.MeshStandardMaterial;
    Екран: THREE.MeshStandardMaterial;
    ["Свел. корпус"]: THREE.MeshStandardMaterial;
    ["светодиод крс"]: THREE.MeshStandardMaterial;
    ["светодиод оранж"]: THREE.MeshStandardMaterial;
    плюс: THREE.MeshStandardMaterial;
    Television_01: THREE.MeshStandardMaterial;
    modular_electricity_poles_pieces: THREE.MeshStandardMaterial;
    ["Stage Speaker 60x60x120"]: THREE.MeshStandardMaterial;
    ["01___Default"]: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};
function VideoMaterial({ url }: { url: string }) {
  const texture = useVideoTexture(url, { width: 1920, height: 1080 });
  const noiseTexture = useTexture("/images/noise.webp");

  const shaderUniforms = useMemo(
    () => ({
      iTime: { type: "f", value: 1.0 },
      iResolution: { type: "v2", value: new THREE.Vector2(4, 3) },
      iChannel0: { type: "t", value: texture },
    }),
    [texture]
  );

  return (
    <>
      <shaderMaterial
        uniforms={shaderUniforms}
        fragmentShader={FragmentShader}
        vertexShader={VertexShader}
        transparent
        opacity={1}
      />
    </>
  );
}

function FallbackMaterial({
  texture,
}: {
  texture: THREE.MeshStandardMaterial;
}) {
  return <meshBasicMaterial {...texture} toneMapped={false} />;
}
export function TV9(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/tv9-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null} position={[-28, -4, -7]} scale={2.7}>
      <group
        position={[10.205, 0.709, 1.833]}
        rotation={[0, 0, Math.PI]}
        scale={[1, 1.2, 1]}
      >
        <mesh
          geometry={nodes.Cube006.geometry}
          material={materials["Noise fabric.002"]}
        />
        <mesh
          geometry={nodes.Cube006_1.geometry}
          material={materials.Typenschild}
        />
        <mesh
          geometry={nodes.Cube006_2.geometry}
          material={materials.PaletteMaterial002}
        />
        <mesh
          geometry={nodes.Cube006_3.geometry}
          material={materials["Steel_Gebürsted.Dunkel.000"]}
        />
        <mesh
          geometry={nodes.Cube006_4.geometry}
          material={materials["Material.007"]}
        />
        <mesh
          geometry={nodes.Cube006_5.geometry}
          material={materials.PaletteMaterial004}
        />
        <mesh
          geometry={nodes.Cube006_6.geometry}
          material={materials["Material.013"]}
        />
        <mesh
          geometry={nodes.Cube006_7.geometry}
          material={materials["Noise fabric.001"]}
        />
        <mesh
          geometry={nodes.Cube006_8.geometry}
          material={materials["02___Default_1002"]}
        />
        <mesh
          geometry={nodes.Cube006_9.geometry}
          material={materials["02___Default_1001"]}
        />

        <mesh geometry={nodes.Cube006_10.geometry}>
          <Suspense
            fallback={<FallbackMaterial texture={materials.Material} />}
          >
            <VideoMaterial url={"/videos/coding.mp4"} />
          </Suspense>
        </mesh>
        <mesh geometry={nodes.Cube006_11.geometry} material={materials.TV} />
        <mesh
          geometry={nodes.Cube006_12.geometry}
          material={materials["07_-_Default"]}
        />
        <mesh
          geometry={nodes.Cube006_13.geometry}
          material={materials["08_-_Default"]}
        />
        <mesh
          geometry={nodes.Cube006_14.geometry}
          material={materials["большая кнопка"]}
        />
        <mesh
          geometry={nodes.Cube006_15.geometry}
          material={materials["сред кнопка"]}
        />
        <mesh
          geometry={nodes.Cube006_16.geometry}
          material={materials["маленькие кнопки"]}
        />
        <mesh
          geometry={nodes.Cube006_17.geometry}
          material={materials.корпус}
        />
        <mesh
          geometry={nodes.Cube006_18.geometry}
          material={materials["пластик екрана"]}
        />
        <mesh geometry={nodes.Cube006_19.geometry} material={materials.Екран} />
        <mesh
          geometry={nodes.Cube006_20.geometry}
          material={materials["Свел. корпус"]}
        />
        <mesh
          geometry={nodes.Cube006_21.geometry}
          material={materials["светодиод крс"]}
        />
        <mesh
          geometry={nodes.Cube006_22.geometry}
          material={materials["светодиод оранж"]}
        />
        <mesh geometry={nodes.Cube006_23.geometry} material={materials.плюс} />
        <mesh
          geometry={nodes.Cube006_24.geometry}
          material={materials.Television_01}
        />
        <mesh
          geometry={nodes.Cube006_25.geometry}
          material={materials.modular_electricity_poles_pieces}
        />
        <mesh
          geometry={nodes.Cube006_26.geometry}
          material={materials["Stage Speaker 60x60x120"]}
        />
        <mesh
          geometry={nodes.Cube006_27.geometry}
          material={materials["01___Default"]}
        />
        <mesh
          geometry={nodes.Cube006_28.geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes.Cube006_29.geometry}
          material={materials.PaletteMaterial003}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/tv9-transformed.glb");
