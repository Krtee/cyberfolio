/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/tv10.glb -t -T 
Files: public/tv10.glb [437.71MB] > /Users/minh/websites/portfolio/tv10-transformed.glb [7.38MB] (98%)
*/

import { useGLTF, useVideoTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { Suspense, useEffect, useMemo, useRef } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import FragmentShader from "./../utils/shader/crt/fragment.glsl";
import VertexShader from "./../utils/shader/tv/vertex.glsl";

type ActionName = "actionNameOne" | "actionNameTwo";

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    ["fsf_07_-_Default_0005_1"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_2"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_3"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_4"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_5"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_6"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_7"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_8"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_9"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_10"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_11"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_12"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_13"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_14"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_15"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_16"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_17"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_18"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_19"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_20"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_21"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_22"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_23"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_24"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_25"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_26"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_27"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_28"]: THREE.Mesh;
    ["fsf_07_-_Default_0005_29"]: THREE.Mesh;
  };
  materials: {
    ["07_-_Default"]: THREE.MeshStandardMaterial;
    ["08_-_Default"]: THREE.MeshStandardMaterial;
    ["02___Default_1002"]: THREE.MeshStandardMaterial;
    ["02___Default_1001"]: THREE.MeshStandardMaterial;
    Material: THREE.MeshStandardMaterial;
    ["большая кнопка"]: THREE.MeshStandardMaterial;
    ["сред кнопка"]: THREE.MeshStandardMaterial;
    ["маленькие кнопки"]: THREE.MeshStandardMaterial;
    корпус: THREE.MeshStandardMaterial;
    ["пластик екрана"]: THREE.MeshStandardMaterial;
    Екран: THREE.MeshStandardMaterial;
    ["Свел. корпус"]: THREE.MeshStandardMaterial;
    ["светодиод крс"]: THREE.MeshStandardMaterial;
    ["светодиод оранж"]: THREE.MeshStandardMaterial;
    плюс: THREE.MeshStandardMaterial;
    Television_01: THREE.MeshStandardMaterial;
    modular_electricity_poles_pieces: THREE.MeshStandardMaterial;
    ["Stage Speaker 60x60x120"]: THREE.MeshStandardMaterial;
    ["01___Default"]: THREE.MeshStandardMaterial;
    ["Noise fabric.002"]: THREE.MeshStandardMaterial;
    Typenschild: THREE.MeshStandardMaterial;
    PaletteMaterial002: THREE.MeshStandardMaterial;
    ["Steel_Gebürsted.Dunkel.000"]: THREE.MeshStandardMaterial;
    ["Material.007"]: THREE.MeshStandardMaterial;
    PaletteMaterial004: THREE.MeshStandardMaterial;
    ["Material.013"]: THREE.MeshStandardMaterial;
    ["Noise fabric.001"]: THREE.MeshStandardMaterial;
    PaletteMaterial001: THREE.MeshStandardMaterial;
    PaletteMaterial003: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

function VideoMaterial({ url }: { url: string }) {
  const texture = useVideoTexture(url, { width: 1920, height: 1080 });
  const materialRef = useRef<THREE.ShaderMaterial>(null);
  useEffect(() => {
    texture.flipY = false;
    texture.needsUpdate = true;
  }, [texture]);

  useFrame((state) => {
    let time = state.clock.getElapsedTime();

    if (materialRef.current) {
      materialRef.current.uniforms.iTime.value = time + 20;
    }
  });

  const shaderUniforms = useMemo(() => {
    return {
      iTime: { type: "f", value: 1.0 },
      iResolution: { type: "v2", value: new THREE.Vector2(4, 3) },
      iChannel0: { type: "t", value: texture },
    };
  }, [texture]);

  return (
    <>
      <shaderMaterial
        uniforms={shaderUniforms}
        fragmentShader={FragmentShader}
        vertexShader={VertexShader}
        transparent
        opacity={1}
        ref={materialRef}
      />
    </>
  );
}

function FallbackMaterial({
  texture,
}: {
  texture: THREE.MeshStandardMaterial;
}) {
  return <meshBasicMaterial {...texture} toneMapped={false} />;
}
export function TV10(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/tv10-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null} position={[-38.5, -3.8, -7]} scale={2.7}>
      <group
        position={[13.739, 0.698, 1.82]}
        rotation={[-1.405, -0.25, -0.799]}
        scale={0.009}
      >
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_1"].geometry}
          material={materials["07_-_Default"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_2"].geometry}
          material={materials["08_-_Default"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_3"].geometry}
          material={materials["02___Default_1002"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_4"].geometry}
          material={materials["02___Default_1001"]}
        />

        <mesh geometry={nodes["fsf_07_-_Default_0005_5"].geometry}>
          <Suspense
            fallback={<FallbackMaterial texture={materials.Material} />}
          >
            <VideoMaterial url={"/videos/coding.mp4"} />
          </Suspense>
        </mesh>
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_6"].geometry}
          material={materials["большая кнопка"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_7"].geometry}
          material={materials["сред кнопка"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_8"].geometry}
          material={materials["маленькие кнопки"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_9"].geometry}
          material={materials.корпус}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_10"].geometry}
          material={materials["пластик екрана"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_11"].geometry}
          material={materials.Екран}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_12"].geometry}
          material={materials["Свел. корпус"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_13"].geometry}
          material={materials["светодиод крс"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_14"].geometry}
          material={materials["светодиод оранж"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_15"].geometry}
          material={materials.плюс}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_16"].geometry}
          material={materials.Television_01}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_17"].geometry}
          material={materials.modular_electricity_poles_pieces}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_18"].geometry}
          material={materials["Stage Speaker 60x60x120"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_19"].geometry}
          material={materials["01___Default"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_20"].geometry}
          material={materials["Noise fabric.002"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_21"].geometry}
          material={materials.Typenschild}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_22"].geometry}
          material={materials.PaletteMaterial002}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_23"].geometry}
          material={materials["Steel_Gebürsted.Dunkel.000"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_24"].geometry}
          material={materials["Material.007"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_25"].geometry}
          material={materials.PaletteMaterial004}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_26"].geometry}
          material={materials["Material.013"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_27"].geometry}
          material={materials["Noise fabric.001"]}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_28"].geometry}
          material={materials.PaletteMaterial001}
        />
        <mesh
          geometry={nodes["fsf_07_-_Default_0005_29"].geometry}
          material={materials.PaletteMaterial003}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/tv10-transformed.glb");
